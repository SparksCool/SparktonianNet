@page
@model SparktonianNet.Pages.SettingsModel
@{

    ViewData["Title"] = "Settings";

    var isDarkMode = false;
    var isCustomTheme = false;

    if (HttpContext.Request.Cookies["customtheme"] == "true")
    {
        isCustomTheme = true;
    }
    else if (HttpContext.Request.Cookies["darkmode"] == "true")
    {
        isDarkMode = true;
    }

    // Custom theme variables
    var customcolorbg = HttpContext.Request.Cookies["customcolorbg"];
    var customcolortext = HttpContext.Request.Cookies["customcolortext"];
    var customcolorlink = HttpContext.Request.Cookies["customcolorlink"];
    var customcolorlinkhover = HttpContext.Request.Cookies["customcolorlinkhover"];
    var customcolorlinkvisited = HttpContext.Request.Cookies["customcolorlinkvisited"];
    var customcolorlinkvisitedhover = HttpContext.Request.Cookies["customcolorlinkvisitedhover"];
    var customcolorborder = HttpContext.Request.Cookies["customcolorborder"];
    var customcolorfooterbg = HttpContext.Request.Cookies["customcolorfooterbg"];
    var customcolorfootertext = HttpContext.Request.Cookies["customcolorfootertext"];
    var customcolornavbar = HttpContext.Request.Cookies["customcolornavbar"];
    var customcolornavbartext = HttpContext.Request.Cookies["customcolornavbartext"];
}

 <div class="text-center">
     <h1 class="display-4">Settings</h1>
</div>

<label class="switch">
    <input type="checkbox" id="darkmode">
    <span class="slider round"></span>
</label>

Dark Mode <br>

<label class="switch">
    <input type="checkbox" id="customtheme">
    <span class="slider round"></span>
</label>

Custom Theme
<br>

<h3>Custom Theme Settings</h3>

<input type="color" id="customcolorbg" value="#f0f0f0"> Background Color <br>
<input type="color" id="customcolortext" value="#1a1a1a"> Text Color <br>
<input type="color" id="customcolorlink" value="#1a1a1a"> Link Color <br>
<input type="color" id="customcolorlinkhover" value="#1a1a1a"> Link Hover Color <br>
<input type="color" id="customcolorlinkvisited" value="#1a1a1a"> Link Visited Color <br>
<input type="color" id="customcolorlinkvisitedhover" value="#1a1a1a"> Link Visited Hover Color <br>
<input type="color" id="customcolorborder" value="#1a1a1a"> Border Color <br>
<input type="color" id="customcolorfooterbg" value="#f0f0f0"> Footer Background Color <br>
<input type="color" id="customcolorfootertext" value="#1a1a1a"> Footer Text Color <br>
<input type="color" id="customcolornavbar" value="#1a1a1a"> Navbar Color <br>
<input type="color" id="customcolornavbartext" value="rgba(0,0,0,1)"> Navbar Text Color <br>


<button type="button" id="confirmcustom">Submit </button>
<button type="button" id="downloadtheme">Export </button>
<button type="button" id="importtheme">Import </button>

<style>
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        /* Hide default HTML checkbox */
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        /* The slider */
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            -webkit-transition: .4s;
            transition: .4s;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

        input:checked + .slider {
            background-color: #2196F3;
        }

        input:focus + .slider {
            box-shadow: 0 0 1px #2196F3;
        }

        input:checked + .slider:before {
            -webkit-transform: translateX(26px);
            -ms-transform: translateX(26px);
            transform: translateX(26px);
        }

        /* Rounded sliders */
        .slider.round {
            border-radius: 34px;
        }

        .slider.round:before {
            border-radius: 50%;
        }
</style>

<script>
    // get dark mode and custom theme checkboxes from HTML document
    var darkmode = document.getElementById("darkmode");
    var customtheme = document.getElementById("customtheme");

    // to make C# happy
    var True = true;
    var False = false;
    
    // set dark mode and custom theme checkboxes to current values
    if (@isCustomTheme) {
        customtheme.checked = true;
    } 
    
    if (@isDarkMode) {
        darkmode.checked = true;
    }
    
    // get custom theme color inputs from HTML document
    var customcolorbg = document.getElementById("customcolorbg");
    var customcolortext = document.getElementById("customcolortext");
    var customcolorlink = document.getElementById("customcolorlink");
    var customcolorlinkhover = document.getElementById("customcolorlinkhover");
    var customcolorlinkvisited = document.getElementById("customcolorlinkvisited");
    var customcolorlinkvisitedhover = document.getElementById("customcolorlinkvisitedhover");
    var customcolorborder = document.getElementById("customcolorborder");
    var customcolorfooterbg = document.getElementById("customcolorfooterbg");
    var customcolorfootertext = document.getElementById("customcolorfootertext");
    var customcolornavbar = document.getElementById("customcolornavbar");
    var customcolornavbartext = document.getElementById("customcolornavbartext");

    // set custom theme colors to current values
    customcolorbg.value = "@customcolorbg";
    customcolortext.value = "@customcolortext";
    customcolorlink.value = "@customcolorlink";
    customcolorlinkhover.value = "@customcolorlinkhover";
    customcolorlinkvisited.value = "@customcolorlinkvisited";
    customcolorlinkvisitedhover.value = "@customcolorlinkvisitedhover";
    customcolorborder.value = "@customcolorborder";
    customcolorfooterbg.value = "@customcolorfooterbg";
    customcolorfootertext.value = "@customcolorfootertext";
    customcolornavbar.value = "@customcolornavbar";
    customcolornavbartext.value = "@customcolornavbartext";

    // add event listeners to dark mode checkbox
    darkmode.addEventListener("change", function () {
        // if dark mode is checked, set dark mode cookie to true
        if (customtheme.checked) { 
            document.cookie = "customtheme=true";
        } else if (darkmode.checked) {
            document.cookie = "darkmode=true";
            document.cookie = "customtheme=false";
            setTimeout(function () { location.reload(); }, 400);
        } else {
            document.cookie = "darkmode=false";
            document.cookie = "customtheme=false";
            setTimeout(function () { location.reload(); }, 400);
        }
    });
    
    // add event listeners to custom theme checkbox
    customtheme.addEventListener("change", function () {
        // if custom theme is checked, set custom theme cookie to true
        if (customtheme.checked) {
            document.cookie = "customtheme=true";
            setTimeout(function () { location.reload(); }, 400);
        } else if (darkmode.checked) {
            document.cookie = "darkmode=true";
            document.cookie = "customtheme=false";
            setTimeout(function () { location.reload(); }, 400);
        } else {
            document.cookie = "darkmode=false";
            document.cookie = "customtheme=false";
            setTimeout(function () { location.reload(); }, 400);
        }
    });

    // add event listener to submit button
    var confirmcustom = document.getElementById("confirmcustom");
    confirmcustom.addEventListener("click", function () {

        // set custom theme colors to current values
        document.cookie = "customcolorbg=" + customcolorbg.value;
        document.cookie = "customcolortext=" + customcolortext.value;
        document.cookie = "customcolorlink=" + customcolorlink.value;
        document.cookie = "customcolorlinkhover=" + customcolorlinkhover.value;
        document.cookie = "customcolorlinkvisited=" + customcolorlinkvisited.value;
        document.cookie = "customcolorlinkvisitedhover=" + customcolorlinkvisitedhover.value;
        document.cookie = "customcolorborder=" + customcolorborder.value;
        document.cookie = "customcolorfooterbg=" + customcolorfooterbg.value;
        document.cookie = "customcolorfootertext=" + customcolorfootertext.value;
        document.cookie = "customcolornavbar=" + customcolornavbar.value;
        document.cookie = "customcolornavbartext=" + customcolornavbartext.value;

        // reload page to apply changes
        setTimeout(function () { location.reload(); }, 400);
    })

    var downloadtheme = document.getElementById("downloadtheme");
    downloadtheme.addEventListener("click", function () {

        // create theme object
        var theme = {
            customcolorbg: customcolorbg.value,
            customcolortext: customcolortext.value,
            customcolorlink: customcolorlink.value,
            customcolorlinkhover: customcolorlinkhover.value,
            customcolorlinkvisited: customcolorlinkvisited.value,
            customcolorlinkvisitedhover: customcolorlinkvisitedhover.value,
            customcolorborder: customcolorborder.value,
            customcolorfooterbg: customcolorfooterbg.value,
            customcolorfootertext: customcolorfootertext.value,
            customcolornavbar: customcolornavbar.value,
            customcolornavbartext: customcolornavbartext.value
        }

        // download theme as JSON
        var themeJSON = JSON.stringify(theme);
        var themeBlob = new Blob([themeJSON], { type: "application/json" });
        var themeURL = URL.createObjectURL(themeBlob);
        var themeLink = document.createElement("a");
        themeLink.href = themeURL;
        themeLink.download = "sparktoniantheme.json";
        themeLink.click();
    });

    var importTheme = document.getElementById("importtheme");
    importTheme.addEventListener("click", function () {

        // create file input
        var fileInput = document.createElement("input");
        fileInput.type = "file";
        fileInput.accept = ".json";
        fileInput.style.display = "none";
        document.body.appendChild(fileInput);
        fileInput.click();

        // add event listener to file input
        fileInput.addEventListener("change", function () {

            // read file
            var file = fileInput.files[0];
            var reader = new FileReader();
            reader.readAsText(file);

            reader.onload = function () {

                // parse theme object
                var theme = JSON.parse(reader.result);

                // set custom theme colors to theme object values
                customcolorbg.value = theme.customcolorbg;
                customcolortext.value = theme.customcolortext;
                customcolorlink.value = theme.customcolorlink;
                customcolorlinkhover.value = theme.customcolorlinkhover;
                customcolorlinkvisited.value = theme.customcolorlinkvisited;
                customcolorlinkvisitedhover.value = theme.customcolorlinkvisitedhover;
                customcolorborder.value = theme.customcolorborder;
                customcolorfooterbg.value = theme.customcolorfooterbg;
                customcolorfootertext.value = theme.customcolorfootertext;
                customcolornavbar.value = theme.customcolornavbar;
                customcolornavbartext.value = theme.customcolornavbartext;
                
                confirmcustom.click();
            };
        });
    });

</script>